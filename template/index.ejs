<!-- Licensed under a BSD license. See license.html for license -->
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>WebGL - 2D Image Blend</title>
<!--<link type="text/css" href="resources/webgl-tutorials.css" rel="stylesheet" />-->
<script type="text/javascript" src="/library/main/examples/webgl-utils.js"></script>
<script type="text/javascript" src="/library/underscore/underscore-min.js"></script>
<script type="text/javascript" src="/library/jquery/jquery.min.js"></script>
<script>
window.onload = main;

function main()
{
//    stack_test_adjust()
//    multiple_stacks_test_adjust()
      ui_test()
}

function Node(id, xy, image)
{
    this.__id    = id
    this.__xy    = xy
    this.__image = image
    this.__z     = 0
}

Node.prototype = 
{
    id: function()
    {
        return this.__id
    }

    // Return the XY structure. 
    //
    ,xy: function()
    {
        return this.__xy
    }

    // The image object.
    // 
    ,image: function()
    {
        return this.__image
    }

    ,z: function()
    {
        return this.__z
    }
}

Layer = function(image, z)
{
    this.__image = image
    this.__z     = z
}

Layer.prototype = 
{
    // The image object.
    //
     image: function()
    {
        return this.__image
    }
    ,z: function()
    {
        return this.__z
    }
}

// ([Node], Stack, Stack)
//
Stack = function(nodes, from, to)
{
    this.__nodes = nodes
    this.__from  = from
    this.__to    = to

    var z = 0
    _.each(nodes, function(node)
    {
        node.__z = z
        z += 1
    })

    // Because public interface are read-only,
    // we don't need care index-node mismatching problem.
    this.__map_node = _.reduce
    (  nodes
    ,  function(mem, node)
    {
       mem[node.id()] = node
       return mem
    }
    , {} ) 
}

Stack.prototype = 
{
    nodes: function()
    {
        return this.__nodes
    }
    
    ,from: function()
    {
        return this.__from
    }
    
    ,to: function()
    {
        return this.__to
    }
    
    ,node: function(id)
    {
        return this.__map_node[id]
    }
}

// Can receive a stack of node as specification described.
//
// a -> LocalLayering a
LocalLayering = function(a)
{
    return new LocalLayering.o(a)
}

LocalLayering.o = function(a)
{
    this.__a = a
    this.__bind = {}
}

LocalLayering.o.prototype =
{
    _: function(fn)
    {
        this.__a = fn.apply(this.__bind)
        return this
    }

    // Naming previous result.
    //
    // EX: LocalLayering(graphic).as('graphic')._(function(){ this.graphic ... })
    //
    ,as: function(name)
    {
        this.__bind[name] = this.__a
        return this
    }    

    ,adjust: function(stack)
    {
        this.__a = stack
        return this
    }

    // Filp-Down one layer.
    //
    // LocalLayering Stack -> LocalLayering Stack
    ,down: function(id)
    {
        // +z
        var target = this.__a.node(id)
        var nodes = this.__a.nodes()

        for(var idx = 0; idx != nodes.length; idx++)
        {
            var node = nodes[idx]

            if( node.id() == target.id() ){ continue }
            if( node.__z > target.__z )
            {
                // find the node above the target, and swap their Z.
                tmp = node.__z
                node.__z = target.__z
                target.__z = tmp

                break
            }
        }
        return this
    }

    // Filp-Up one layer.
    //
    // LocalLayering Stack -> LocalLayering Stack
    ,up: function(id)
    {
        // -z
        var target = this.__a.node(id)
        var nodes = this.__a.nodes()

        for(var idx = 0; idx != nodes.length; idx++)
        {
            var node = nodes[idx]

            if( node.id() == target.id() ){ continue }
            if( node.__z < target.__z )
            {
                // find the node above the target, and swap their Z.
                tmp = node.__z
                node.__z = target.__z
                target.__z = tmp

                break
            }
        }
        return this
    }

    // Final, render out all stacks.
    // Previous result must be `LocalLayering [Stack]`
    //
    ,render: function()
    {
        _.chain(this.__a).
          each(function(stack)
          { 
              _.chain(stack.nodes()).
                sortBy(function(node){ return node.z() }).
                each(function(node)
                {
                      // Sorted, render follow the Z order,
                      // first render largest one.
                      render(node.image(), node.xy())
                })
          })

        return this
    }
}

// If all images got loaded, trigger callback
function imagesLoaderTrigger(images, markers, cb)
{
    _.chain(images).
      each(function(img)
      {
            img.onload = function() 
            {
                markers.push(true)
                if(images.length == markers.length)
                {
                    cb()
                }
            }
      })
}

// Will generate another function to receive the event.
// Bring all information to the event handler.
//
function clickAdjustUp(node, stack, stacks)
{
    return function(e)
    {
        LocalLayering(stacks).as('stacks').
            adjust(stack).up(node.id()).
            _(function(){ return this.stacks}).
            render()
    }
}

// Will generate another function to receive the event.
// Bring all information to the event handler.
//
function clickAdjustDown(node, stack, stacks)
{
    return function(e)
    {   
        LocalLayering(stacks).as('stacks').
            adjust(stack).down(node.id()).
            _(function(){ return this.stacks}).
            render()
    }
}

function ui_test()
{
    var marker_loaded = [] 

    var image0 = new Image();
    var image1 = new Image();
    var image2 = new Image();
    var image3 = new Image();

    var node_image0 = new Node("0",{x: 150, y: 150}, image0) 
    var node_image1 = new Node("1",{x: 200, y: 200}, image1) 
    var node_image2 = new Node("2",{x: 250, y: 250}, image2) 
    var node_image3 = new Node("3",{x: 300, y: 300}, image3) 

    // Stack will automatically set the order according to the order passed in. 
    //
    var stack0 = new Stack([node_image0, node_image1], null, null) 
    var stack1 = new Stack([node_image2, node_image3], stack0, null) 

    var stacks = [stack0, stack1]

    image0.src = "/media/examples/leaves0.jpg";  // MUST BE SAME DOMAIN!!!
    image1.src = "/media/examples/leaves1.jpg";  // MUST BE SAME DOMAIN!!!
    image2.src = "/media/examples/leaves2.jpg";  // MUST BE SAME DOMAIN!!!
    image3.src = "/media/examples/leaves3.jpg";  // MUST BE SAME DOMAIN!!!

    imagesLoaderTrigger
    (   [image0, image1, image2, image3]
        , marker_loaded
        , function()
        {
            _.chain([{node: node_image0, stack: stack0}, {node: node_image1, stack: stack0},
                     {node: node_image2, stack: stack1}, {node: node_image3, stack: stack1 }]).
              each(function(n_s)
              {

                    $(n_s.node.image()).appendTo('body')
                    n_s.node.image().addEventListener("click", clickAdjustDown(n_s.node, n_s.stack, stacks ))
                    n_s.node.image().addEventListener("contextmenu", function(e){e.preventDefault()  /* Right-click */} )
                    n_s.node.image().addEventListener("contextmenu", clickAdjustUp(n_s.node, n_s.stack, stacks ))
              })
              LocalLayering(stacks).render()
        }
    )
}


function render(image, xy_rect) {
  // Get A WebGL context
  var canvas = document.getElementById("canvas");
  var gl = getWebGLContext(canvas);
  if (!gl) {
    return;
  }

  // setup GLSL program
  vertexShader = createShaderFromScriptElement(gl, "2d-vertex-shader");
  fragmentShader = createShaderFromScriptElement(gl, "2d-fragment-shader");
  program = createProgram(gl, [vertexShader, fragmentShader]);
  gl.useProgram(program);

  // look up where the vertex data needs to go.
  var positionLocation = gl.getAttribLocation(program, "a_position");
  var texCoordLocation = gl.getAttribLocation(program, "a_texCoord");

  // provide texture coordinates for the rectangle.
  var texCoordBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
      0.0,  0.0,
      1.0,  0.0,
      0.0,  1.0,
      0.0,  1.0,
      1.0,  0.0,
      1.0,  1.0]), gl.STATIC_DRAW);
  gl.enableVertexAttribArray(texCoordLocation);
  gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);

  var texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);

  // Set the parameters so we can render any size image.
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

  // Upload the image into the texture.
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

  // lookup uniforms
  var resolutionLocation = gl.getUniformLocation(program, "u_resolution");
  var textureSizeLocation = gl.getUniformLocation(program, "u_textureSize");

  // set the resolution
  gl.uniform2f(resolutionLocation, canvas.width, canvas.height);

  // set the size of the image
  gl.uniform2f(textureSizeLocation, image.width, image.height);

  // Create a buffer for the position of the rectangle corners.
  var positionBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
  gl.enableVertexAttribArray(positionLocation);
  gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

  setRectangle( gl, xy_rect.x, xy_rect.y, image.width, image.height);

  // Draw the rectangle.
  gl.drawArrays(gl.TRIANGLES, 0, 6);
}

function randomInt(range) {
  return Math.floor(Math.random() * range);
}

function setRectangle(gl, x, y, width, height) {
  var x1 = x;
  var x2 = x + width;
  var y1 = y;
  var y2 = y + height;
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
     x1, y1,
     x2, y1,
     x1, y2,
     x1, y2,
     x2, y1,
     x2, y2]), gl.STATIC_DRAW);
}

</script>
<!-- vertex shader -->
<script id="2d-vertex-shader" type="x-shader/x-vertex">
attribute vec2 a_position;
attribute vec2 a_texCoord;

uniform vec2 u_resolution;

varying vec2 v_texCoord;

void main() {
   // convert the rectangle from pixels to 0.0 to 1.0
   vec2 zeroToOne = a_position / u_resolution;

   // convert from 0->1 to 0->2
   vec2 zeroToTwo = zeroToOne * 2.0;

   // convert from 0->2 to -1->+1 (clipspace)
   vec2 clipSpace = zeroToTwo - 1.0;

   gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);

   // pass the texCoord to the fragment shader
   // The GPU will interpolate this value between points.
   v_texCoord = a_texCoord;
}
</script></script>
<!-- fragment shader -->
<script id="2d-fragment-shader" type="x-shader/x-fragment">
precision mediump float;

// our texture
uniform sampler2D u_image;
uniform vec2 u_textureSize;

// the texCoords passed in from the vertex shader.
varying vec2 v_texCoord;

void main() {
   vec2 onePixel = vec2(1.0, 1.0) / u_textureSize;
   gl_FragColor = (
       texture2D(u_image, v_texCoord) +
       texture2D(u_image, v_texCoord + vec2(onePixel.x, 0.0)) +
       texture2D(u_image, v_texCoord + vec2(-onePixel.x, 0.0))) / 3.0;
}
</script>
</head>
<body>
<canvas id="canvas" width="800" height="800"></canvas>
</body>
</html>



